"""
ÏÑ§Ï†ï ÌéòÏù¥ÏßÄ - Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ
"""
import streamlit as st
import sys
from pathlib import Path
import json
from datetime import datetime
from frontend.ui.utils.streamlit_helpers import rerun

# ÌîÑÎ°úÏ†ùÌä∏ Î£®Ìä∏Î•º Python Í≤ΩÎ°úÏóê Ï∂îÍ∞Ä
sys.path.append(str(Path(__file__).parent.parent.parent))

from frontend.ui.utils.api_client import APIClient

# ÌéòÏù¥ÏßÄ ÏÑ§Ï†ï
st.set_page_config(
    page_title="ÏÑ§Ï†ï - GTOne RAG",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

# API ÌÅ¥ÎùºÏù¥Ïñ∏Ìä∏ Ï¥àÍ∏∞Ìôî
api_client = APIClient()

# Ìó§Îçî
st.title("‚öôÔ∏è ÏãúÏä§ÌÖú ÏÑ§Ï†ï")
st.markdown("GTOne RAG ÏãúÏä§ÌÖúÏùò ÏÑ§Ï†ïÏùÑ Í¥ÄÎ¶¨Ìï©ÎãàÎã§.")

# ÏÑ§Ï†ï ÌÉ≠
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "ü§ñ AI ÏÑ§Ï†ï",
    "üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú",
    "üîß Í≥†Í∏â ÏÑ§Ï†ï",
    "üíæ Î∞±ÏóÖ/Î≥µÏõê",
    "‚ÑπÔ∏è Ï†ïÎ≥¥"
])

# ===============================
# AI ÏÑ§Ï†ï ÌÉ≠ - Í∞úÏÑ†Îêú Î≤ÑÏ†Ñ
# ===============================
with tab1:
    st.header("ü§ñ AI ÏÑ§Ï†ï")

    # Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏ ÏÑπÏÖò
    st.subheader("üîó Ïó∞Í≤∞ ÏÉÅÌÉú")

    # Ïó∞Í≤∞ ÌÖåÏä§Ìä∏ Î≤ÑÌäº
    col_test, col_info = st.columns([1, 3])

    with col_test:
        if st.button("üîç Ïó∞Í≤∞ ÌÖåÏä§Ìä∏", key="connection_test_btn"):
            with st.spinner("Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."):
                # API ÏÑúÎ≤Ñ Ïó∞Í≤∞ ÌÖåÏä§Ìä∏
                try:
                    health_data = api_client.health_check()
                    st.session_state.connection_status = health_data
                    st.session_state.last_connection_check = datetime.now()
                except Exception as e:
                    st.session_state.connection_status = {"status": "error", "message": str(e)}
                    st.session_state.last_connection_check = datetime.now()

    with col_info:
        if 'connection_status' in st.session_state:
            status = st.session_state.connection_status
            check_time = st.session_state.get('last_connection_check')

            if status.get('status') == 'healthy':
                st.success(f"‚úÖ ÏãúÏä§ÌÖú Ï†ïÏÉÅ Ïó∞Í≤∞Îê® ({check_time.strftime('%H:%M:%S')})")
            elif status.get('status') == 'degraded':
                st.warning(f"‚ö†Ô∏è ÏùºÎ∂Ä ÏÑúÎπÑÏä§ Î¨∏Ï†ú ({check_time.strftime('%H:%M:%S')})")
            else:
                st.error(f"‚ùå Ïó∞Í≤∞ Ïã§Ìå® ({check_time.strftime('%H:%M:%S')})")
        else:
            st.info("Ïó∞Í≤∞ ÌÖåÏä§Ìä∏Î•º ÏàòÌñâÌïòÏó¨ ÏãúÏä§ÌÖú ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

    st.divider()

    # LLM ÏÑ§Ï†ï
    st.subheader("LLM (Ïñ∏Ïñ¥ Î™®Îç∏) ÏÑ§Ï†ï")

    col1, col2 = st.columns(2)

    with col1:
        # Î™®Îç∏ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®
        refresh_col, auto_col = st.columns([2, 1])

        with refresh_col:
            if st.button("üîÑ Î™®Îç∏ Î™©Î°ù ÏÉàÎ°úÍ≥†Ïπ®", help="ÏÑúÎ≤ÑÏóêÏÑú ÏµúÏã† Î™®Îç∏ Î™©Î°ùÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§", key="refresh_models_btn"):
                with st.spinner("Î™®Îç∏ Î™©Î°ù Î°úÎî© Ï§ë..."):
                    try:
                        available_models = api_client.get_available_models()

                        if available_models:
                            st.session_state.available_models = available_models
                            st.session_state.models_last_updated = datetime.now()
                            st.success(f"‚úÖ {len(available_models)}Í∞ú Î™®Îç∏ÏùÑ Ï∞æÏïòÏäµÎãàÎã§")
                        else:
                            st.error("‚ùå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§. Ollama ÏÑúÎ≤ÑÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")
                            st.session_state.available_models = []

                    except Exception as e:
                        st.error(f"‚ùå Î™®Îç∏ Î™©Î°ù Î°úÎî© Ïã§Ìå®: {str(e)}")
                        st.session_state.available_models = []

        with auto_col:
            auto_refresh = st.checkbox("ÏûêÎèô", help="ÌéòÏù¥ÏßÄ Î°úÎìú Ïãú ÏûêÎèôÏúºÎ°ú Î™®Îç∏ Î™©Î°ùÏùÑ Í∞ÄÏ†∏ÏòµÎãàÎã§", key="auto_refresh_models")

        # ÏÑ∏ÏÖò ÏÉÅÌÉúÏóêÏÑú Î™®Îç∏ Î™©Î°ù Í∞ÄÏ†∏Ïò§Í∏∞ (ÏûêÎèô Î°úÎî© ÎòêÎäî Í∏∞Ï°¥ Îç∞Ïù¥ÌÑ∞)
        if 'available_models' not in st.session_state or auto_refresh:
            if auto_refresh or 'available_models' not in st.session_state:
                with st.spinner("Î™®Îç∏ Î™©Î°ù Ï¥àÍ∏∞ Î°úÎî© Ï§ë..."):
                    try:
                        available_models = api_client.get_available_models()
                        st.session_state.available_models = available_models
                        st.session_state.models_last_updated = datetime.now()

                        if not available_models:
                            st.warning("‚ö†Ô∏è ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§.")

                    except Exception as e:
                        st.error(f"Î™®Îç∏ Î™©Î°ù Î°úÎî© Ïã§Ìå®: {str(e)}")
                        st.session_state.available_models = []

        available_models = st.session_state.get('available_models', [])

        # ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏ ÏãúÍ∞Ñ ÌëúÏãú
        if 'models_last_updated' in st.session_state:
            last_updated = st.session_state.models_last_updated
            st.caption(f"ÎßàÏßÄÎßâ ÏóÖÎç∞Ïù¥Ìä∏: {last_updated.strftime('%H:%M:%S')}")

        # Î™®Îç∏ ÏÑ†ÌÉù
        if available_models and len(available_models) > 0:
            current_model = st.session_state.get('selected_model')

            # ÌòÑÏû¨ ÏÑ†ÌÉùÎêú Î™®Îç∏Ïù¥ Î™©Î°ùÏóê ÏóÜÍ±∞ÎÇò ÏóÜÏúºÎ©¥ Ï≤´ Î≤àÏß∏Î°ú ÏÑ§Ï†ï
            if not current_model or current_model not in available_models:
                current_model = available_models[0]
                st.session_state.selected_model = current_model

            selected_model = st.selectbox(
                "ÏÇ¨Ïö©Ìï† Î™®Îç∏",
                available_models,
                index=available_models.index(current_model),
                help="ÎãµÎ≥Ä ÏÉùÏÑ±Ïóê ÏÇ¨Ïö©Ìï† LLM Î™®Îç∏",
                key="model_select"
            )

            # ÏÑ†ÌÉùÎêú Î™®Îç∏ ÏÑ∏ÏÖòÏóê Ï†ÄÏû•
            st.session_state.selected_model = selected_model

        else:
            st.error("‚ùå ÏÇ¨Ïö© Í∞ÄÎä•Ìïú Î™®Îç∏Ïù¥ ÏóÜÏäµÎãàÎã§.")
            st.markdown("""
            **Ìï¥Í≤∞ Î∞©Î≤ï:**
            1. Ollama ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏
            2. Î™®Îç∏Ïù¥ ÏÑ§ÏπòÎêòÏñ¥ ÏûàÎäîÏßÄ ÌôïÏù∏ (`ollama list`)
            3. ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ ÏÉÅÌÉú ÌôïÏù∏
            4. API ÏÑúÎ≤Ñ Î°úÍ∑∏ ÌôïÏù∏
            """)
            selected_model = None
            st.session_state.selected_model = None

        st.divider()

        # ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï Ï∂îÍ∞Ä
        st.write("**Ïó∞Í≤∞ Î∞è ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï**")

        # API ÌÉÄÏûÑÏïÑÏõÉ
        api_timeout = st.slider(
            "API ÌÉÄÏûÑÏïÑÏõÉ (Ï¥à)",
            min_value=30,
            max_value=600,
            value=st.session_state.get('api_timeout', 300),
            step=30,
            help="API ÏöîÏ≤≠Ïùò ÏµúÎåÄ ÎåÄÍ∏∞ ÏãúÍ∞Ñ",
            key="api_timeout_slider"
        )

        # RAG ÏÉùÏÑ± ÌÉÄÏûÑÏïÑÏõÉ
        rag_timeout = st.slider(
            "RAG ÏÉùÏÑ± ÌÉÄÏûÑÏïÑÏõÉ (Ï¥à)",
            min_value=60,
            max_value=900,
            value=st.session_state.get('rag_timeout', 300),
            step=30,
            help="ÎãµÎ≥Ä ÏÉùÏÑ±Ïùò ÏµúÎåÄ ÎåÄÍ∏∞ ÏãúÍ∞Ñ",
            key="rag_timeout_slider"
        )

        # ÌÉÄÏûÑÏïÑÏõÉ ÏÑ§Ï†ï Ï†ÅÏö©
        st.session_state.api_timeout = api_timeout
        st.session_state.rag_timeout = rag_timeout
        api_client.set_timeout(api_timeout)

        st.divider()

        # Î™®Îç∏ ÌååÎùºÎØ∏ÌÑ∞ ÏÑ§Ï†ï (Î™®Îç∏Ïù¥ ÏûàÏùÑ ÎïåÎßå)
        if selected_model:
            st.write("**Î™®Îç∏ ÌååÎùºÎØ∏ÌÑ∞**")

            # Temperature
            temperature = st.slider(
                "Temperature (Ï∞ΩÏùòÏÑ±)",
                min_value=0.0,
                max_value=2.0,
                value=st.session_state.get('temperature', 0.3),
                step=0.1,
                help="ÎÇÆÏùÑÏàòÎ°ù ÏùºÍ¥ÄÎêú ÎãµÎ≥Ä, ÎÜíÏùÑÏàòÎ°ù Ï∞ΩÏùòÏ†ÅÏù∏ ÎãµÎ≥Ä",
                key="temperature_slider"
            )

            # Max tokens
            max_tokens = st.number_input(
                "ÏµúÎåÄ ÌÜ†ÌÅ∞ Ïàò",
                min_value=100,
                max_value=4000,
                value=st.session_state.get('max_tokens', 1000),
                step=100,
                help="ÏÉùÏÑ±Ìï† ÎãµÎ≥ÄÏùò ÏµúÎåÄ Í∏∏Ïù¥",
                key="max_tokens_input"
            )
        else:
            st.warning("‚ö†Ô∏è Î™®Îç∏ÏùÑ ÏÑ†ÌÉùÌï¥Ïïº ÌååÎùºÎØ∏ÌÑ∞Î•º ÏÑ§Ï†ïÌï† Ïàò ÏûàÏäµÎãàÎã§.")

    with col2:
        # ÏÑ†ÌÉùÎêú Î™®Îç∏ Ï†ïÎ≥¥ ÌëúÏãú (Î™®Îç∏Ïù¥ ÏûàÏùÑ ÎïåÎßå)
        if selected_model:
            with st.expander("üìã Î™®Îç∏ Ï†ïÎ≥¥", expanded=True):
                with st.spinner("Î™®Îç∏ Ï†ïÎ≥¥ Î°úÎî© Ï§ë..."):
                    try:
                        model_info = api_client.get_model_info(selected_model)
                        if 'error' not in model_info:
                            st.write(f"**Î™®Îç∏**: {model_info.get('name', selected_model)}")

                            # Î™®Îç∏ ÌÅ¨Í∏∞
                            if 'size' in model_info:
                                size_bytes = model_info['size']
                                if size_bytes > 0:
                                    # Î∞îÏù¥Ìä∏Î•º ÏùΩÍ∏∞ Ï¢ãÏùÄ ÌòïÏãùÏúºÎ°ú Î≥ÄÌôò
                                    size_gb = size_bytes / (1024 ** 3)
                                    if size_gb >= 1:
                                        st.write(f"**ÌÅ¨Í∏∞**: {size_gb:.1f} GB")
                                    else:
                                        size_mb = size_bytes / (1024 ** 2)
                                        st.write(f"**ÌÅ¨Í∏∞**: {size_mb:.0f} MB")

                            # ÏàòÏ†ïÏùº
                            if 'modified_at' in model_info:
                                modified_at = model_info['modified_at']
                                if modified_at:
                                    try:
                                        # ISO ÎÇ†Ïßú ÌååÏã±
                                        from datetime import datetime
                                        dt = datetime.fromisoformat(modified_at.replace('Z', '+00:00'))
                                        st.write(f"**ÏàòÏ†ïÏùº**: {dt.strftime('%Y-%m-%d %H:%M')}")
                                    except:
                                        st.write(f"**ÏàòÏ†ïÏùº**: {modified_at}")

                            # ÏÉÅÏÑ∏ Ï†ïÎ≥¥
                            if 'details' in model_info:
                                details = model_info['details']
                                if 'parameter_size' in details:
                                    st.write(f"**ÌååÎùºÎØ∏ÌÑ∞**: {details['parameter_size']}")
                                if 'quantization_level' in details:
                                    st.write(f"**ÏñëÏûêÌôî**: {details['quantization_level']}")

                            # Î™®Îç∏ Ìå®Î∞ÄÎ¶¨ Ï†ïÎ≥¥
                            if ':' in selected_model:
                                family, tag = selected_model.split(':', 1)
                                st.write(f"**Ìå®Î∞ÄÎ¶¨**: {family}")
                                st.write(f"**ÌÉúÍ∑∏**: {tag}")

                        else:
                            st.caption("Î™®Îç∏ Ï†ïÎ≥¥Î•º Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§")
                            st.caption(f"Ïò§Î•ò: {model_info.get('error', 'Ïïå Ïàò ÏóÜÎäî Ïò§Î•ò')}")
                    except Exception as e:
                        st.caption(f"Î™®Îç∏ Ï†ïÎ≥¥ Î°úÎî© Ïã§Ìå®: {str(e)}")

        # Ï∂îÍ∞Ä ÌååÎùºÎØ∏ÌÑ∞ (Î™®Îç∏Ïù¥ ÏûàÏùÑ ÎïåÎßå)
        if selected_model:
            st.write("**Í≥†Í∏â ÌååÎùºÎØ∏ÌÑ∞**")

            # Top P
            top_p = st.slider(
                "Top P",
                min_value=0.0,
                max_value=1.0,
                value=st.session_state.get('top_p', 0.9),
                step=0.05,
                help="ÌôïÎ•† Î∂ÑÌè¨ ÏÉÅÏúÑ P%Îßå Í≥†Î†§",
                key="top_p_slider"
            )

            # Frequency penalty
            frequency_penalty = st.slider(
                "Frequency Penalty",
                min_value=0.0,
                max_value=2.0,
                value=st.session_state.get('frequency_penalty', 0.0),
                step=0.1,
                help="Î∞òÎ≥µ Îã®Ïñ¥ ÏÇ¨Ïö© ÏñµÏ†ú",
                key="frequency_penalty_slider"
            )

            # System prompt
            system_prompt = st.text_area(
                "ÏãúÏä§ÌÖú ÌîÑÎ°¨ÌîÑÌä∏",
                value=st.session_state.get('system_prompt',
                                           "ÎãπÏã†ÏùÄ Î¨∏ÏÑú Í∏∞Î∞ò ÏßàÏùòÏùëÎãµ ÏãúÏä§ÌÖúÏûÖÎãàÎã§. Ï†úÍ≥µÎêú Î¨∏ÏÑúÏùò ÎÇ¥Ïö©ÎßåÏùÑ Î∞îÌÉïÏúºÎ°ú Ï†ïÌôïÌïòÍ≥† ÎèÑÏõÄÏù¥ ÎêòÎäî ÎãµÎ≥ÄÏùÑ Ï†úÍ≥µÌïòÏÑ∏Ïöî."),
                height=150,
                help="AIÏùò Í∏∞Î≥∏ ÌñâÎèô ÏßÄÏπ®",
                key="system_prompt_area"
            )
        else:
            st.info("Î™®Îç∏ÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌïòÏÑ∏Ïöî.")

    st.divider()

    # RAG ÏÑ§Ï†ï (Î™®Îç∏Ïù¥ ÏûàÏùÑ ÎïåÎßå)
    if selected_model:
        st.subheader("RAG (Í≤ÄÏÉâ Ï¶ùÍ∞ï ÏÉùÏÑ±) ÏÑ§Ï†ï")

        col1, col2 = st.columns(2)

        with col1:
            # Í≤ÄÏÉâ Î¨∏ÏÑú Ïàò
            rag_top_k = st.slider(
                "Í≤ÄÏÉâÌï† Î¨∏ÏÑú Ïàò",
                min_value=1,
                max_value=20,
                value=st.session_state.get('rag_top_k', 3),
                help="ÎãµÎ≥Ä ÏÉùÏÑ± Ïãú Ï∞∏Ï°∞Ìï† Î¨∏ÏÑúÏùò Í∞úÏàò",
                key="rag_top_k_slider"
            )

            # ÏµúÏÜå Ïú†ÏÇ¨ÎèÑ
            min_similarity = st.slider(
                "ÏµúÏÜå Ïú†ÏÇ¨ÎèÑ ÏûÑÍ≥ÑÍ∞í",
                min_value=0.0,
                max_value=1.0,
                value=st.session_state.get('min_similarity', 0.5),
                step=0.05,
                help="Ïù¥ Í∞í Ïù¥ÏÉÅÏùò Ïú†ÏÇ¨ÎèÑÎ•º Í∞ÄÏßÑ Î¨∏ÏÑúÎßå ÏÇ¨Ïö©",
                key="min_similarity_slider"
            )

            # Ïª®ÌÖçÏä§Ìä∏ Í∏∏Ïù¥
            context_window = st.number_input(
                "Ïª®ÌÖçÏä§Ìä∏ ÏúàÎèÑÏö∞ ÌÅ¨Í∏∞",
                min_value=500,
                max_value=8000,
                value=st.session_state.get('context_window', 3000),
                step=500,
                help="LLMÏóê Ï†úÍ≥µÌï† ÏµúÎåÄ Ïª®ÌÖçÏä§Ìä∏ Í∏∏Ïù¥",
                key="context_window_input"
            )

        with col2:
            # Ï≤≠ÌÅ¨ ÏÑ§Ï†ï
            chunk_size = st.number_input(
                "Ï≤≠ÌÅ¨ ÌÅ¨Í∏∞",
                min_value=100,
                max_value=2000,
                value=st.session_state.get('chunk_size', 500),
                step=100,
                help="Î¨∏ÏÑúÎ•º Î∂ÑÌï†ÌïòÎäî Í∏∞Î≥∏ ÌÅ¨Í∏∞",
                key="chunk_size_input"
            )

            chunk_overlap = st.number_input(
                "Ï≤≠ÌÅ¨ Ï§ëÏ≤©",
                min_value=0,
                max_value=500,
                value=st.session_state.get('chunk_overlap', 50),
                step=50,
                help="Ï≤≠ÌÅ¨ Í∞Ñ Ï§ëÏ≤©ÎêòÎäî ÌÖçÏä§Ìä∏ Í∏∏Ïù¥",
                key="chunk_overlap_input"
            )

            # ÏûÑÎ≤†Îî© Î™®Îç∏
            embedding_model = st.selectbox(
                "ÏûÑÎ≤†Îî© Î™®Îç∏",
                ["intfloat/multilingual-e5-large-instruct", "intfloat/e5-large-v2"],
                index=0 if st.session_state.get('embedding_model',
                                                "intfloat/multilingual-e5-large-instruct") == "intfloat/multilingual-e5-large-instruct" else 1,
                help="Î¨∏ÏÑú Î≤°ÌÑ∞ÌôîÏóê ÏÇ¨Ïö©Ìï† Î™®Îç∏",
                key="embedding_model_select"
            )
    else:
        st.warning("‚ö†Ô∏è Î™®Îç∏ÏùÑ ÏÑ†ÌÉùÌï¥Ïïº RAG ÏÑ§Ï†ïÏùÑ Ìï† Ïàò ÏûàÏäµÎãàÎã§.")

    # ÏÑ§Ï†ï Ï†ÄÏû• Î≤ÑÌäº
    col_save, col_reset, col_test = st.columns([2, 1, 1])

    with col_save:
        # Î™®Îç∏Ïù¥ ÏÑ†ÌÉùÎêòÏóàÏùÑ ÎïåÎßå Ï†ÄÏû• Í∞ÄÎä•
        if selected_model:
            if st.button("üíæ AI ÏÑ§Ï†ï Ï†ÄÏû•", type="primary", key="save_ai_settings"):
                settings = {
                    "llm": {
                        "model": selected_model,
                        "temperature": temperature,
                        "max_tokens": max_tokens,
                        "top_p": top_p,
                        "frequency_penalty": frequency_penalty,
                        "system_prompt": system_prompt
                    },
                    "rag": {
                        "top_k": rag_top_k,
                        "min_similarity": min_similarity,
                        "context_window": context_window,
                        "chunk_size": chunk_size,
                        "chunk_overlap": chunk_overlap,
                        "embedding_model": embedding_model
                    },
                    "api": {
                        "timeout": api_timeout,
                        "rag_timeout": rag_timeout
                    }
                }

                # ÏÑ∏ÏÖò ÏÉÅÌÉúÏóê Í∞ÅÍ∞Å Ï†ÄÏû• (UI ÏÉÅÌÉú Ïú†ÏßÄÏö©)
                for key, value in settings["llm"].items():
                    st.session_state[key] = value
                for key, value in settings["rag"].items():
                    st.session_state[key] = value
                for key, value in settings["api"].items():
                    st.session_state[f"api_{key}"] = value

                # ÌÜµÌï© ÏÑ§Ï†ï Ï†ÄÏû•
                st.session_state.ai_settings = settings

                # ÏÑúÎ≤ÑÏóêÎèÑ ÏÑ§Ï†ï Ï†ÑÏÜ° (ÏÑ†ÌÉùÏ†Å)
                try:
                    result = api_client.update_settings(settings)
                    if result.get('updated', True):
                        st.success("‚úÖ AI ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")
                        st.info(f"ÏÑ†ÌÉùÎêú Î™®Îç∏: {selected_model}")
                    else:
                        st.warning("‚ö†Ô∏è Î°úÏª¨ ÏÑ§Ï†ïÏùÄ Ï†ÄÏû•ÎêòÏóàÏúºÎÇò ÏÑúÎ≤Ñ ÏóÖÎç∞Ïù¥Ìä∏Ïóê Ïã§Ìå®ÌñàÏäµÎãàÎã§.")
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è Î°úÏª¨ ÏÑ§Ï†ïÏùÄ Ï†ÄÏû•ÎêòÏóàÏúºÎÇò ÏÑúÎ≤Ñ ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®: {str(e)}")
        else:
            st.button("üíæ AI ÏÑ§Ï†ï Ï†ÄÏû•", disabled=True, help="Î™®Îç∏ÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", key="save_ai_settings_disabled")

    with col_reset:
        if st.button("üîÑ Í∏∞Î≥∏Í∞í Î≥µÏõê", key="reset_ai_settings"):
            # ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
            if st.session_state.get('confirm_reset_ai') != True:
                st.session_state.confirm_reset_ai = True
                st.warning("‚ö†Ô∏è Îã§Ïãú ÌÅ¥Î¶≠ÌïòÎ©¥ Î™®Îì† ÏÑ§Ï†ïÏù¥ Í∏∞Î≥∏Í∞íÏúºÎ°ú Î≥µÏõêÎê©ÎãàÎã§.")
            else:
                # Í∏∞Î≥∏Í∞íÏúºÎ°ú Î≥µÏõê
                defaults = {
                    "temperature": 0.3,
                    "max_tokens": 1000,
                    "top_p": 0.9,
                    "frequency_penalty": 0.0,
                    "system_prompt": "ÎãπÏã†ÏùÄ Î¨∏ÏÑú Í∏∞Î∞ò ÏßàÏùòÏùëÎãµ ÏãúÏä§ÌÖúÏûÖÎãàÎã§. Ï†úÍ≥µÎêú Î¨∏ÏÑúÏùò ÎÇ¥Ïö©ÎßåÏùÑ Î∞îÌÉïÏúºÎ°ú Ï†ïÌôïÌïòÍ≥† ÎèÑÏõÄÏù¥ ÎêòÎäî ÎãµÎ≥ÄÏùÑ Ï†úÍ≥µÌïòÏÑ∏Ïöî.",
                    "rag_top_k": 3,
                    "min_similarity": 0.5,
                    "context_window": 3000,
                    "chunk_size": 500,
                    "chunk_overlap": 50,
                    "embedding_model": "intfloat/multilingual-e5-large-instruct",
                    "api_timeout": 300,
                    "rag_timeout": 300
                }

                for key, value in defaults.items():
                    st.session_state[key] = value

                del st.session_state.confirm_reset_ai
                st.success("‚úÖ ÏÑ§Ï†ïÏù¥ Í∏∞Î≥∏Í∞íÏúºÎ°ú Î≥µÏõêÎêòÏóàÏäµÎãàÎã§.")
                st.rerun()

    with col_test:
        if selected_model:
            if st.button("üß™ Î™®Îç∏ ÌÖåÏä§Ìä∏", key="test_model"):
                with st.spinner("Î™®Îç∏ ÌÖåÏä§Ìä∏ Ï§ë..."):
                    try:
                        # Í∞ÑÎã®Ìïú ÌÖåÏä§Ìä∏ ÏßàÎ¨∏ÏúºÎ°ú Î™®Îç∏ ÎèôÏûë ÌôïÏù∏
                        test_result = api_client.generate_answer(
                            query="ÏïàÎÖïÌïòÏÑ∏Ïöî",
                            top_k=1,
                            model=selected_model,
                            timeout=60  # ÌÖåÏä§Ìä∏Ïö© ÏßßÏùÄ ÌÉÄÏûÑÏïÑÏõÉ
                        )

                        if 'error' not in test_result:
                            st.success("‚úÖ Î™®Îç∏ ÌÖåÏä§Ìä∏ ÏÑ±Í≥µ")
                            st.info(f"ÏÇ¨Ïö©Îêú Î™®Îç∏: {selected_model}")
                        else:
                            st.error(f"‚ùå Î™®Îç∏ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {test_result.get('error')}")
                    except Exception as e:
                        st.error(f"‚ùå Î™®Îç∏ ÌÖåÏä§Ìä∏ Ïã§Ìå®: {str(e)}")
        else:
            st.button("üß™ Î™®Îç∏ ÌÖåÏä§Ìä∏", disabled=True, help="Î™®Îç∏ÏùÑ Î®ºÏ†Ä ÏÑ†ÌÉùÌïòÏÑ∏Ïöî", key="test_model_disabled")

# ===============================
# ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌÉ≠ (Í∏∞Ï°¥ ÏΩîÎìú Ïú†ÏßÄ)
# ===============================
with tab2:
    st.header("üìä ÏãúÏä§ÌÖú ÏÉÅÌÉú")

    # ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏
    if st.button("üîÑ ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ®", type="primary"):
        with st.spinner("ÏãúÏä§ÌÖú ÏÉÅÌÉú ÌôïÏù∏ Ï§ë..."):
            try:
                health_data = api_client.health_check()
                st.session_state.last_health_check = health_data
                st.session_state.health_check_time = datetime.now()
                st.success("‚úÖ ÏÉÅÌÉú ÌôïÏù∏ ÏôÑÎ£å")
            except Exception as e:
                st.error(f"ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: {str(e)}")
                # Ïò§Î•ò ÏãúÏóêÎèÑ Í∏∞Î≥∏ ÏÉÅÌÉú ÏÑ§Ï†ï
                st.session_state.last_health_check = {
                    "status": "error",
                    "services": {
                        "qdrant": {"status": "unknown"},
                        "ollama": {"status": "unknown"},
                        "celery": {"status": "unknown"}
                    }
                }
                st.session_state.health_check_time = datetime.now()

    # ÏÉÅÌÉú ÌëúÏãú - ÏïàÏ†ÑÌïú Ï†ëÍ∑º Î∞©Ïãù
    if 'last_health_check' in st.session_state and 'health_check_time' in st.session_state:
        health_data = st.session_state.last_health_check
        check_time = st.session_state.health_check_time

        st.caption(f"ÎßàÏßÄÎßâ ÌôïÏù∏: {check_time.strftime('%Y-%m-%d %H:%M:%S')}")

        # Ï†ÑÏ≤¥ ÏÉÅÌÉú
        overall_status = health_data.get('status', 'unknown')
        if overall_status == 'healthy':
            st.success("‚úÖ ÏãúÏä§ÌÖú Ï†ïÏÉÅ ÏûëÎèô Ï§ë")
        elif overall_status == 'error':
            st.error("‚ùå ÏãúÏä§ÌÖú Î¨∏Ï†ú Í∞êÏßÄ")
        else:
            st.warning("‚ö†Ô∏è ÏãúÏä§ÌÖú ÏÉÅÌÉú Î∂àÎ™Ö")

        # ÏÑúÎπÑÏä§Î≥Ñ ÏÉÅÌÉú
        services = health_data.get('services', {})

        col1, col2, col3 = st.columns(3)

        with col1:
            st.subheader("üóÑÔ∏è Qdrant")
            qdrant = services.get('qdrant', {})
            qdrant_status = qdrant.get('status', 'unknown')

            if qdrant_status == 'connected':
                st.success("Ïó∞Í≤∞Îê®")
                collections = qdrant.get('collections', [])
                st.write(f"Ïª¨Î†âÏÖò: {len(collections)}Í∞ú")
                for coll in collections[:5]:  # ÏµúÎåÄ 5Í∞úÎßå ÌëúÏãú
                    st.caption(f"‚Ä¢ {coll}")
                if len(collections) > 5:
                    st.caption(f"... Ïô∏ {len(collections) - 5}Í∞ú")

                # ÌïúÍµ≠Ïñ¥ Ïª®ÌÖêÏ∏† ÎπÑÏú® ÌëúÏãú
                korean_ratio = qdrant.get('korean_content_ratio', 0)
                if korean_ratio > 0:
                    st.caption(f"ÌïúÍµ≠Ïñ¥ Ïª®ÌÖêÏ∏†: {korean_ratio:.1%}")
            else:
                st.error("Ïó∞Í≤∞ Ïã§Ìå®")
                if 'error' in qdrant:
                    st.caption(f"Ïò§Î•ò: {qdrant['error']}")

        with col2:
            st.subheader("ü§ñ Ollama")
            ollama = services.get('ollama', {})
            ollama_status = ollama.get('status', 'unknown')

            if ollama_status == 'connected':
                st.success("Ïó∞Í≤∞Îê®")
                st.write(f"Ìò∏Ïä§Ìä∏: {ollama.get('host', 'N/A')}")

                models = ollama.get('models', [])
                total_models = ollama.get('total_models', len(models))
                st.write(f"Î™®Îç∏: {total_models}Í∞ú")

                # Ï≤òÏùå 3Í∞ú Î™®Îç∏Îßå ÌëúÏãú
                for model in models[:3]:
                    st.caption(f"‚Ä¢ {model}")
                if len(models) > 3:
                    st.caption(f"... Ïô∏ {len(models) - 3}Í∞ú")
            else:
                st.error("Ïó∞Í≤∞ Ïã§Ìå®")
                if 'error' in ollama:
                    st.caption(f"Ïò§Î•ò: {ollama['error']}")

        with col3:
            st.subheader("üì® Celery")
            celery = services.get('celery', {})
            celery_status = celery.get('status', 'unknown')

            if celery_status == 'connected':
                st.success("Ïó∞Í≤∞Îê®")
                st.write("ÏõåÏª§ ÌôúÏÑ±")
            else:
                st.error("Ïó∞Í≤∞ Ïã§Ìå®")

        # ÏûÑÎ≤†Îî© Î™®Îç∏ ÏÉÅÌÉú (ÏûàÏúºÎ©¥ ÌëúÏãú)
        if 'embedding' in services:
            st.divider()
            st.subheader("üî§ ÏûÑÎ≤†Îî© Î™®Îç∏")
            embedding = services['embedding']
            embedding_status = embedding.get('status', 'unknown')

            if embedding_status == 'ready':
                st.success("Ï§ÄÎπÑÎê®")
                embedding_info = embedding.get('info', {})
                if 'model_name' in embedding_info:
                    st.write(f"Î™®Îç∏: {embedding_info['model_name']}")
                if 'dimension' in embedding_info:
                    st.write(f"Ï∞®Ïõê: {embedding_info['dimension']}")
            else:
                st.error("Ïò§Î•ò")
                if 'info' in embedding and 'error' in embedding['info']:
                    st.caption(f"Ïò§Î•ò: {embedding['info']['error']}")

    else:
        # ÏÉÅÌÉú Ï†ïÎ≥¥Í∞Ä ÏóÜÎäî Í≤ΩÏö∞
        st.info("üîÑ ÏÉÅÌÉú ÏÉàÎ°úÍ≥†Ïπ® Î≤ÑÌäºÏùÑ ÌÅ¥Î¶≠ÌïòÏó¨ ÏãúÏä§ÌÖú ÏÉÅÌÉúÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.")

        # ÏûêÎèôÏúºÎ°ú ÌïúÎ≤à Î°úÎìúÌï¥Î≥¥Í∏∞
        if st.button("ÏûêÎèô ÏÉÅÌÉú ÌôïÏù∏", key="auto_health_check"):
            with st.spinner("ÏãúÏä§ÌÖú ÏÉÅÌÉú ÏûêÎèô ÌôïÏù∏ Ï§ë..."):
                try:
                    health_data = api_client.health_check()
                    st.session_state.last_health_check = health_data
                    st.session_state.health_check_time = datetime.now()
                    st.rerun()
                except Exception as e:
                    st.error(f"ÏûêÎèô ÏÉÅÌÉú ÌôïÏù∏ Ïã§Ìå®: {str(e)}")

# Í∏∞Ï°¥ ÌÉ≠3, ÌÉ≠4, ÌÉ≠5Îäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ...

with tab3:
    st.header("üîß Í≥†Í∏â ÏÑ§Ï†ï")

    # Î≤°ÌÑ∞ DB ÏÑ§Ï†ï
    st.subheader("Î≤°ÌÑ∞ Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ ÏÑ§Ï†ï")

    col1, col2 = st.columns(2)

    with col1:
        # Qdrant ÏÑ§Ï†ï
        qdrant_host = st.text_input(
            "Qdrant Ìò∏Ïä§Ìä∏",
            value="qdrant",
            help="Qdrant ÏÑúÎ≤Ñ Ï£ºÏÜå"
        )

        qdrant_port = st.number_input(
            "Qdrant Ìè¨Ìä∏",
            value=6333,
            help="Qdrant ÏÑúÎ≤Ñ Ìè¨Ìä∏"
        )

        collection_name = st.text_input(
            "Ïª¨Î†âÏÖò Ïù¥Î¶Ñ",
            value="chunks",
            help="Î¨∏ÏÑúÎ•º Ï†ÄÏû•Ìï† Ïª¨Î†âÏÖò"
        )

    with col2:
        # Ïù∏Îç±Ïã± ÏÑ§Ï†ï
        vector_size = st.number_input(
            "Î≤°ÌÑ∞ Ï∞®Ïõê",
            value=1024,
            help="ÏûÑÎ≤†Îî© Î≤°ÌÑ∞Ïùò Ï∞®Ïõê Ïàò"
        )

        distance_metric = st.selectbox(
            "Í±∞Î¶¨ Ï∏°Ï†ï Î∞©Î≤ï",
            ["Cosine", "Euclidean", "Dot Product"],
            help="Î≤°ÌÑ∞ Í∞Ñ Ïú†ÏÇ¨ÎèÑ Í≥ÑÏÇ∞ Î∞©Î≤ï"
        )

        index_threshold = st.number_input(
            "Ïù∏Îç±Ïä§ ÏûÑÍ≥ÑÍ∞í",
            value=10000,
            help="Ïù∏Îç±Ïä§ ÏµúÏ†ÅÌôî ÏûÑÍ≥ÑÍ∞í"
        )

    st.divider()

    # OCR ÏÑ§Ï†ï
    st.subheader("OCR ÏÑ§Ï†ï")

    ocr_engine = st.selectbox(
        "OCR ÏóîÏßÑ",
        ["Tesseract", "Azure Vision API"],
        help="Ïù¥ÎØ∏ÏßÄ ÌÖçÏä§Ìä∏ Ï∂îÏ∂úÏóê ÏÇ¨Ïö©Ìï† ÏóîÏßÑ"
    )

    if ocr_engine == "Azure Vision API":
        azure_key = st.text_input(
            "Azure API Key",
            type="password",
            help="Azure Cognitive Services API ÌÇ§"
        )

        azure_endpoint = st.text_input(
            "Azure Endpoint",
            placeholder="https://your-resource.cognitiveservices.azure.com/",
            help="Azure ÏÑúÎπÑÏä§ ÏóîÎìúÌè¨Ïù∏Ìä∏"
        )

    ocr_languages = st.multiselect(
        "OCR Ïñ∏Ïñ¥",
        ["kor", "eng", "jpn", "chi_sim", "chi_tra"],
        default=["kor", "eng"],
        help="OCRÏóêÏÑú Ïù∏ÏãùÌï† Ïñ∏Ïñ¥"
    )

    # Í≥†Í∏â ÏÑ§Ï†ï Ï†ÄÏû•
    if st.button("üíæ Í≥†Í∏â ÏÑ§Ï†ï Ï†ÄÏû•", type="primary"):
        advanced_settings = {
            "vector_db": {
                "host": qdrant_host,
                "port": qdrant_port,
                "collection": collection_name,
                "vector_size": vector_size,
                "distance_metric": distance_metric,
                "index_threshold": index_threshold
            },
            "ocr": {
                "engine": ocr_engine,
                "languages": ocr_languages
            }
        }

        if ocr_engine == "Azure Vision API":
            advanced_settings["ocr"]["azure_key"] = azure_key
            advanced_settings["ocr"]["azure_endpoint"] = azure_endpoint

        st.session_state.advanced_settings = advanced_settings
        st.success("‚úÖ Í≥†Í∏â ÏÑ§Ï†ïÏù¥ Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§.")

with tab4:
    st.header("üíæ Î∞±ÏóÖ Î∞è Î≥µÏõê")

    # Î∞±ÏóÖ
    st.subheader("üì§ Î∞±ÏóÖ")

    backup_options = st.multiselect(
        "Î∞±ÏóÖÌï† Ìï≠Î™© ÏÑ†ÌÉù",
        ["ÏÑ§Ï†ï", "ÎåÄÌôî Í∏∞Î°ù", "Í≤ÄÏÉâ Í∏∞Î°ù", "ÏóÖÎ°úÎìú ÌååÏùº Î™©Î°ù"],
        default=["ÏÑ§Ï†ï", "ÎåÄÌôî Í∏∞Î°ù"]
    )

    if st.button("üíæ Î∞±ÏóÖ ÏÉùÏÑ±", type="primary"):
        backup_data = {
            "created_at": datetime.now().isoformat(),
            "version": "1.0.0"
        }

        if "ÏÑ§Ï†ï" in backup_options:
            backup_data["settings"] = {
                "ai": st.session_state.get("ai_settings", {}),
                "advanced": st.session_state.get("advanced_settings", {})
            }

        if "ÎåÄÌôî Í∏∞Î°ù" in backup_options:
            backup_data["messages"] = st.session_state.get("messages", [])

        if "Í≤ÄÏÉâ Í∏∞Î°ù" in backup_options:
            backup_data["search_history"] = st.session_state.get("search_history", [])

        if "ÏóÖÎ°úÎìú ÌååÏùº Î™©Î°ù" in backup_options:
            backup_data["uploaded_files"] = st.session_state.get("uploaded_files", [])

        # Îã§Ïö¥Î°úÎìú Î≤ÑÌäº
        st.download_button(
            label="üì• Î∞±ÏóÖ Îã§Ïö¥Î°úÎìú",
            data=json.dumps(backup_data, ensure_ascii=False, indent=2),
            file_name=f"gtone_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json",
            mime="application/json"
        )

    st.divider()

    # Î≥µÏõê
    st.subheader("üì• Î≥µÏõê")

    uploaded_backup = st.file_uploader(
        "Î∞±ÏóÖ ÌååÏùº ÏÑ†ÌÉù",
        type=["json"],
        help="Ïù¥Ï†ÑÏóê ÏÉùÏÑ±Ìïú Î∞±ÏóÖ ÌååÏùºÏùÑ ÏóÖÎ°úÎìúÌïòÏÑ∏Ïöî"
    )

    if uploaded_backup is not None:
        try:
            backup_data = json.loads(uploaded_backup.read())

            st.info(f"Î∞±ÏóÖ ÏÉùÏÑ± ÏãúÍ∞Ñ: {backup_data.get('created_at', 'N/A')}")

            # Î≥µÏõê Í∞ÄÎä•Ìïú Ìï≠Î™© ÌëúÏãú
            available_items = []
            if "settings" in backup_data:
                available_items.append("ÏÑ§Ï†ï")
            if "messages" in backup_data:
                available_items.append(f"ÎåÄÌôî Í∏∞Î°ù ({len(backup_data['messages'])}Í∞ú)")
            if "search_history" in backup_data:
                available_items.append(f"Í≤ÄÏÉâ Í∏∞Î°ù ({len(backup_data['search_history'])}Í∞ú)")
            if "uploaded_files" in backup_data:
                available_items.append(f"ÏóÖÎ°úÎìú ÌååÏùº Î™©Î°ù ({len(backup_data['uploaded_files'])}Í∞ú)")

            restore_items = st.multiselect(
                "Î≥µÏõêÌï† Ìï≠Î™© ÏÑ†ÌÉù",
                available_items,
                default=available_items
            )

            if st.button("‚ôªÔ∏è Î≥µÏõê Ïã§Ìñâ", type="secondary"):
                # Î≥µÏõê Ïã§Ìñâ
                if "ÏÑ§Ï†ï" in restore_items and "settings" in backup_data:
                    st.session_state.ai_settings = backup_data["settings"].get("ai", {})
                    st.session_state.advanced_settings = backup_data["settings"].get("advanced", {})

                if any("ÎåÄÌôî Í∏∞Î°ù" in item for item in restore_items) and "messages" in backup_data:
                    st.session_state.messages = backup_data["messages"]

                if any("Í≤ÄÏÉâ Í∏∞Î°ù" in item for item in restore_items) and "search_history" in backup_data:
                    st.session_state.search_history = backup_data["search_history"]

                if any("ÏóÖÎ°úÎìú ÌååÏùº Î™©Î°ù" in item for item in restore_items) and "uploaded_files" in backup_data:
                    st.session_state.uploaded_files = backup_data["uploaded_files"]

                st.success("‚úÖ Î≥µÏõêÏù¥ ÏôÑÎ£åÎêòÏóàÏäµÎãàÎã§.")
                rerun()

        except Exception as e:
            st.error(f"Î∞±ÏóÖ ÌååÏùº ÏùΩÍ∏∞ Ïã§Ìå®: {str(e)}")

with tab5:
    st.header("‚ÑπÔ∏è ÏãúÏä§ÌÖú Ï†ïÎ≥¥")

    # ÏãúÏä§ÌÖú Ï†ïÎ≥¥
    st.subheader("ÏãúÏä§ÌÖú Ï†ïÎ≥¥")

    col1, col2 = st.columns(2)

    with col1:
        st.write("**Î≤ÑÏ†Ñ**")
        st.code("GTOne RAG System v1.0.0")

        st.write("**Python Î≤ÑÏ†Ñ**")
        st.code("Python 3.11+")

        st.write("**ÌîÑÎ†àÏûÑÏõåÌÅ¨**")
        st.code("FastAPI + Streamlit")

    with col2:
        st.write("**Î≤°ÌÑ∞ DB**")
        st.code("Qdrant v1.9.3")

        st.write("**ÏûÑÎ≤†Îî© Î™®Îç∏**")
        st.code("E5-large-instruct")

        st.write("**LLM ÏÑúÎ≤Ñ**")
        st.code("Ollama (External)")

    st.divider()

    # ÎùºÏù¥ÏÑ†Ïä§
    st.subheader("ÎùºÏù¥ÏÑ†Ïä§")
    st.text("""
    MIT License
    
    Copyright (c) 2024 GTOne
    
    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction...
    """)

    st.divider()

    # ÎèÑÏõÄÎßê
    st.subheader("ÎèÑÏõÄÎßê Î∞è ÏßÄÏõê")

    col1, col2, col3 = st.columns(3)

    with col1:
        st.markdown("üìö [ÏÇ¨Ïö©Ïûê Í∞ÄÏù¥Îìú](https://github.com/selmo/gtrag/wiki)")

    with col2:
        st.markdown("üêõ [Î≤ÑÍ∑∏ Î¶¨Ìè¨Ìä∏](https://github.com/selmo/gtrag/issues)")

    with col3:
        st.markdown("üí¨ [Ïª§ÎÆ§ÎãàÌã∞](https://discord.gg/selmo)")

    # Ïó∞ÎùΩÏ≤ò
    st.divider()
    st.caption("Î¨∏Ïùò: support@gtone.com | Í∏∞Ïà† ÏßÄÏõê: tech@gtone.com")

# Ìë∏ÌÑ∞
st.divider()
st.caption("üí° ÏÑ§Ï†ï Î≥ÄÍ≤Ω ÌõÑÏóêÎäî ÏãúÏä§ÌÖúÏùÑ Ïû¨ÏãúÏûëÌïòÍ±∞ÎÇò ÏÉàÎ°úÍ≥†Ïπ®Ïù¥ ÌïÑÏöîÌï† Ïàò ÏûàÏäµÎãàÎã§.")